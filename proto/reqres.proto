syntax = "proto3";
package ecm;

option go_package = "./ecm/pb";

message GetWorkspaceRequest {
  // query for obtaining a Workspace in the format of (field:comparator:value)(and|or conjunction)?
  //
  // Example:
  // (
  //  (objectId:eq:xxxxxx-xxxx-xxxx)
  //  (or)
  //  (workspaceName:like:%value%)
  // )
  string query = 1;
}

message GetWorkspaceResponse {
  string objectId = 1;
}

message CreateWorkspaceRequest {
  string workspaceName = 1;
  string label = 2;
  string description = 3;
}

message CreateWorkspaceResponse {
  string objectId = 1;
}

message CreateFolderRequest {
  // The object id of the container where this folder will be created in.
  // The object id can refer to a workspace or another folder. If parentObjectId
  // refers to a workspace object id, this folder will be created as a top level folder.
  // If the object refers to another folder, then this folder will be created as a child
  // of the folder referred to by parentObjectId.
  string parentObjectId = 1;

  // The name of the folder.
  string workspaceName = 2;
  string label = 3;
  string description = 4;
}

enum FieldType {
  STRING = 0;
  INTEGER = 1;
  DOUBLE = 2;
  DATE = 3;
  // Complex property fields refer to another document category
  COMPLEX = 4;
}

message PropertyField {
  string name = 1;
  string label = 2;
  string description = 3;

  FieldType fieldType = 4;

  // a regex validation expression
  string validationExpr = 5;

  // expression to be evaluated to resolve
  // the value for this field.
  string calculationExpr = 6;

  // indicates whether this property is repeatable i.e. array
  bool repeatable = 7;

  // refers to the id of the document category.
  // only used when fieldType = COMPLEX
  repeated PropertyField subProperties = 8;
}

message CreateDocumentClassRequest {
  // The id of the workspace where this document class
  // should belong to
  string workspaceId = 1;
  string name = 2;
  string label = 3;
  string description = 4;

  // The properties of a document class
  //
  // Property fields are scoped by the document class thus, it is possible that a property
  // field of the same name may have different behavior (validation, evaluation expressions)
  // across different document classes
  repeated PropertyField propertyFields = 5;
}

message CreateDocumentClassResponse {
  string workspaceId = 1;
  string objectId = 2;
  string name = 3;
  string label = 4;
  string description = 5;
  repeated PropertyField propertyFields = 6;
}

message Attribute {
  string key = 1;
  string value = 2;
  FieldType fieldType = 3;
}

message CreateDocumentRequest {
  // Defines the parent of new Document to be created
  string parentId = 1;
  string documentClassId = 2;
  string name = 3;
  string label = 4;
  string description = 5;
  bool isVersioningEnabled = 6;
  string filename = 7;
  string contentType = 8;
  repeated Attribute attributes = 9;
  bytes underlyingDocument = 10;
}

message CreateDocumentResponse {
  string objectId = 1;
}

message UpdateDocumentRequest {
  // the id of the document to update
  string objectId = 1;
  // the document can be moved to another location
  string parentId = 2;
  // the revision which we based our updates on
  // used to optimistically lock the document
  string revision = 3;
  string name = 4;
  string label = 5;
  string description = 6;
  bool isVersioningEnabled = 7;
  string filename = 8;
  string contentType = 9;
  // new attributes will overwrite existing attributes
  repeated Attribute attributes = 10;
  bytes underlyingDocument = 11;
}

message UpdateDocumentResponse {
  string objectId = 1;
}